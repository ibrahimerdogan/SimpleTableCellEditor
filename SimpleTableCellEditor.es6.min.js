"use strict"; window.onload = function () { if (!window.jQuery) throw "jQuery is not loaded" }; var SimpleTableCellEdition = function (t, e) { this.Elem = t, this.oldContent = $(t).html(), this.oldValue = e.internals.extractValue(t), this.cellParams = e }, SimpleTableCellEditor = function () { function t(t, e) { var i = this; void 0 === t && (t = "table"), this.tableId = t, this.params = i._GetExtendedEditorParams(e), this.CellEdition = null, this._TryHandleDataTableReloadEvent(), $(document).mouseup(function (t) { var e = $("#" + i.tableId); e.is(t.target) || 0 !== e.has(t.target).length || i._FreeCurrentCell() }) } var e = t.prototype; return e.SetEditable = function (t, e) { var i = this; if (i._isValidElem(t)) { var l = i._GetExtendedCellParams(e); $(t).on("click", function (t) { $(this).hasClass(i.params.inEditClass) || i._EditCell(this, l) }), $(t).on("keydown", function (t) { $(this).hasClass(i.params.inEditClass) && i._HandleKeyPressed(t.which, this, l) }) } }, e.SetEditableClass = function (t, e) { var i = this, l = i._GetExtendedCellParams(e); $("#" + this.tableId).on("click", "td." + t + ":not(." + i.params.inEditClass + ")", function () { i._EditCell(this, l) }), $("#" + this.tableId).on("keydown", "td." + t + "." + i.params.inEditClass, function (t) { i._HandleKeyPressed(t.which, this, l) }) }, e._HandleKeyPressed = function (t, e, i) { i.keys.validation.includes(t) ? this._EndEditCell(e, i) : i.keys.cancellation.includes(t) && this._CancelEditCell(e, i) }, e._EditCell = function (t, e) { this._FireOnEditEnterEvent(t), this._FreeCurrentCell(), this.CellEdition = new SimpleTableCellEdition(t, e), this.isDataTable && (this.CellEdition.cellIndex = $("#" + this.tableId).DataTable().cell($(t)).index()); var i = e.internals.extractValue(t); $(t).addClass(this.params.inEditClass), e.internals.renderEditor(t, i), this._FireOnEditEnteredEvent(t, i) }, e._EndEditCell = function (t, e) { this._FreeCell(t, e, !0) }, e._CancelEditCell = function (t, e) { this._FreeCell(t, e, !1) }, e._FreeCell = function (t, e, i) { if (this._isValidElem(t) && null !== this.CellEdition) { this._FireOnEditExitEvent(t, this.CellEdition.oldValue); var l = e.internals.extractEditorValue(t); $(t).removeClass(this.params.inEditClass), $(t).html(""); var n = e.formatter(l); e.validation(l) && this.CellEdition.oldValue !== n || (i = !1), this._FireOnEditExitedEvent(t, this.CellEdition.oldValue, n, i), i ? (e.internals.renderValue(t, n), this._FireEditedEvent(t, this.CellEdition.oldValue, n)) : $(t).html(this.CellEdition.oldContent), this.CellEdition = null } }, e._FreeCurrentCell = function () { var t = this._GetCurrentEdition(); null !== t && this._EndEditCell(t.Elem, t.cellParams) }, e._GetCurrentEdition = function () { return null === this.CellEdition ? null : this.CellEdition }, e._GetExtendedEditorParams = function (t) { return $.extend(!0, {}, this._GetDefaultEditorParams(), t) }, e._GetExtendedCellParams = function (t) { return $.extend(!0, {}, this._GetDefaultCellParams(), t) }, e._GetDefaultEditorParams = function () { return { inEditClass: "inEdit" } }, e._GetDefaultCellParams = function () { return { validation: function (t) { return !0 }, formatter: function (t) { return t }, keys: { validation: [13], cancellation: [27] }, internals: this._GetDefaultInternals() } }, e._GetDefaultInternals = function () { return { renderValue: function (t, e) { $(t).text(e) }, renderEditor: function (t, e) { $(t).html("<input type='text' style=\"width:100%; max-width:none\">"); var i = $(t).find("input"); i.focus(), i.val(e) }, extractEditorValue: function (t) { return $(t).find("input").val() }, extractValue: function (t) { return $(t).text() } } }, e._FireOnEditEnterEvent = function (t) { $("#" + this.tableId).trigger({ type: "cell:onEditEnter", element: t }) }, e._FireOnEditEnteredEvent = function (t, e) { $("#" + this.tableId).trigger({ type: "cell:onEditEntered", element: t, oldValue: e }) }, e._FireOnEditExitEvent = function (t, e) { $("#" + this.tableId).trigger({ type: "cell:onEditExit", element: t, oldValue: e }) }, e._FireOnEditExitedEvent = function (t, e, i, l) { $("#" + this.tableId).trigger({ type: "cell:onEditExited", element: t, newValue: i, oldValue: e, applied: l }) }, e._FireEditedEvent = function (t, e, i) { $("#" + this.tableId).trigger({ type: "cell:edited", element: t, newValue: i, oldValue: e }) }, e._TryHandleDataTableReloadEvent = function () { var t = this; this.isDataTable = !1; try { $.fn.DataTable.isDataTable("#" + t.tableId) && (t.isDataTable = !0) } catch (t) { return } t.isDataTable && $("#" + t.tableId).on("draw.dt", function () { if (null !== t.CellEdition && null !== t.CellEdition.Elem) { var e = $("#" + t.tableId).DataTable().cell(t.CellEdition.cellIndex).node(); t._EditCell(e, t.CellEdition.cellParams) } }) }, e._isValidElem = function (t) { return null != t && $(t).length > 0 }, t }();